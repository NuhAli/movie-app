import Head from "next/head";
import styles from "../styles/Home.module.css";
import NavBar from "../components/nav-bar/nav-bar";
import { GetServerSideProps, GetStaticProps } from "next";
import { client } from "../utils/image-loader";
import IMediaItem from "../components/cards/media-item";
import Grid from "../components/grid/grid";
import { GridArea } from "../styles/common";
import { useEffect, useState } from "react";
import { compareStrings } from "../utils/compareString";
import { useSession } from "next-auth/react";
import { useRouter } from "next/router";
import Loading from "../components/loading-spinner/loading-spinner";
interface MovieProps {
  movies: Array<IMediaItem>;
  shows: Array<IMediaItem>;
}

function Bookmarked({ movies, shows }: MovieProps) {
  const [data, setData] = useState<IMediaItem[]>([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [searchResult, setSearchResult] = useState<IMediaItem[]>([]);
  const [showResults, setShowResults] = useState(false);
  const [loading, setLoading] = useState(true);

  const session = useSession();
  const router = useRouter();

  useEffect(() => {
    if (session.status === "unauthenticated") {
      router.push("/sign-in");
    } else if (session.status === "authenticated") {
      router.push("/bookmark");
    }
  }, [session]);

  useEffect(() => {
    setData([...movies, ...shows]);
    setTimeout(() => {
      setLoading(false);
    }, 1000);
  }, [movies, shows]);

  const handleChange = (e: React.FormEvent<HTMLInputElement>) => {
    setSearchTerm(e.currentTarget.value);
  };

  const handleSearch = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    let results = data.filter((item) => compareStrings(searchTerm, item.title));
    setSearchResult(results);
    setShowResults(true);
  };

  const renderGrid = () => {
    if (showResults) {
      return (
        <Grid
          items={searchResult}
          heading={`Found ${searchResult.length} results for '${searchTerm}'`}
        />
      );
    } else {
      return (
        <>
          {movies && <Grid items={movies} heading={"Bookmarked Movies"} />}
          {shows && <Grid items={shows} heading={"Bookmarked TV Series"} />}
        </>
      );
    }
  };

  return (
    <>
      <Head>
        <title>Sanity Media | Bookmark Page</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <Loading loading={loading} />
        <NavBar
          searchTerm={searchTerm}
          handleChange={handleChange}
          handleSearch={handleSearch}
        />
        <GridArea>{renderGrid()}</GridArea>
      </main>
    </>
  );
}

export const getServerSideProps: GetServerSideProps = async () => {
  const query = '*[_type == "media" && isBookmarked == $status]';
  const param = { status: true };

  const media = await client.fetch(query, param);

  const shows = media.filter(
    (item: IMediaItem) => item.category === "TV Series"
  );
  const movies = media.filter((item: IMediaItem) => item.category === "Movie");

  if (!media) {
    return {
      notFound: true,
    };
  }

  return {
    props: {
      movies,
      shows,
    },
  };
};

export default Bookmarked;
