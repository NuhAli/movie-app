import Head from "next/head";
import { useSession } from "next-auth/react";
import { useEffect } from "react";
import { createClient } from "next-sanity";
import IMediaItem from "../components/cards/media-item";
import NavBar from "../components/nav-bar/nav-bar";
import styles from "../styles/Home.module.css";
import { GetServerSideProps, GetServerSidePropsResult, GetStaticProps } from "next";
import { Card, CardArea } from "../styles/common";
import { RailItem } from "../components/rail/rail.style";
import Rail from "../components/rail/rail";
import Grid from "../components/grid/grid";

/* Connect to the Sanity.io client */

const client = createClient({
  projectId: "tjqwyy5h",
  dataset: "production",
  apiVersion: "2023-01-23",
  useCdn: false,
});

interface HomeInterface {
  trending: IMediaItem[];
  recommended: IMediaItem[];
}

export default function Home({ trending, recommended }: HomeInterface) {
  const { data: session } = useSession();
  const { status } = useSession();

  return trending && recommended ? (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
      <NavBar />
        <CardArea>

          {trending && <Rail items={trending} />}
          {recommended && <Grid items={recommended} heading="Recommended for you"/>}
        </CardArea>
      </main>
    </>
  ) : null;
}

export const getStaticProps: GetStaticProps = async () => {
  const media = await client.fetch(`*[_type == "media"]`);

  let trending: IMediaItem[] = media
    .filter((item: IMediaItem) => item.isTrending)
    .sort((a: IMediaItem, b: IMediaItem) => {
      let x = a.title.toLowerCase();
      let y = b.title.toLowerCase();
      if (x < y) {
        return -1;
      }
      if (x > y) {
        return 1;
      }
      return 0;
    });

  let recommended = media.filter((item: IMediaItem) => !item.isTrending);

  if (!media) {
    return {
      notFound: true,
    };
  }

  return {
    props: {
      trending,
      recommended,
    },
  };
};
